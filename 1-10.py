def p1top10():
    def p1():
        '''
        Problem 1:
        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000.
        Answer: 233168
        '''
        a = set([x for x in range(1000) if x % 3 == 0 or x % 5 == 0])
        return sum(a)
    def p2():
        '''
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        '''
        def fib(n, a, b, l):
            #returns all fibonacci numbers under n
            if b>n:
                print(l)
                return(l)
            return fib(n, b,a+b, l+[b])
        f = fib(4*10**6, 1, 1, [1])
        sum = 0
        for n in f:
            if n%2==0:
                sum+=n
        return sum
    def p3():
        '''
        The prime factors of 13195 are 5, 7, 13 and 29.
        What is the largest prime factor of the number 600851475143 ?
        answer: 6857
        '''
        def largestprimefactor(n):
            max = 0
            i = 2
            while n!=1:
                if n%i == 0:
                    n/=i
                    max = i
                else:
                    i+=1
            return max
        print(largestprimefactor(600851475143))
    def p4():
        '''
        A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        Find the largest palindrome made from the product of two 3-digit numbers.
        answer: 906609
        '''
        max = 0
        for p in range(1000):
            for q in range(1000):
                i = 1000-p
                j = 1000-q
                if str(i*j) == str(i*j)[::-1] and i*j>max:
                    max = i*j
        return max
    def p5():
        '''
        2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        :return: 232792560
        '''
        def primefactorize(n):
            #retursn dictionary- keys are primes, values are number of times prime appears in factorization
            i = 2
            dict = {}
            while n!=1:
                if n%i==0:
                    n/=i
                    if i in dict:
                        dict[i] += 1
                    else:
                        dict[i] = 1
                else:
                    i+=1
            return dict

        def lcm(n):
            dict = {}
            for p in range(2,n+1):
                factors = primefactorize(p)
                for f in factors:
                    if f in dict:
                        if factors[f]>dict[f]:
                            dict[f] = factors[f]
                    else:
                        dict[f] = factors[f]

            product = 1
            for x in dict:
                product*= x**dict[x]
            return product
        print(lcm(20))
    def p6():
        '''
        The sum of the squares of the first ten natural numbers is,

        12 + 22 + ... + 102 = 385
        The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)2 = 552 = 3025
        Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

        Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        :return: 25164150
        '''
        sum1 = 0
        sum2 = 0
        for i in range(101):
            sum1+=i
            sum2+= i**2
        print(abs(sum2 - sum1**2))
    def p7():
        '''
        By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10 001st prime number?
        :return: 104743
        '''
        def nthprime(n):
            primes = [2]
            x = 2
            while len(primes)<10001:
                prime = True
                for p in primes:
                    if x%p == 0:
                        prime = False
                if prime:
                    primes.append(x)
                x+=1
            return primes[-1]

        print(nthprime(10001))
    def p8():
        '''
        The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        :return:23514624000
        '''
        def getproduct(s):
            str = s
            max =  0
            for l in range(13, len(str)):
                p = 1
                for i in range(l-13, l):
                    p*= int(str[i])
                if p>max:
                    max = p
            return max
        print(getproduct('7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'))
    def p9():
        '''
        A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

    a2 + b2 = c2
    For example, 32 + 42 = 9 + 16 = 25 = 52.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
        :return: 31875000
        '''
        for a in range(1,1000):
            for b in range(1,1000):
                c = 1000-a-b
                if a**2 + b**2 == c**2:
                    return a*b*c
    def p10():
        '''
        The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        Find the sum of all the primes below two million.
        :return: 142913828922 (took hours)
        '''
        x = 2
        primes = [2]
        sum = 2
        while x<2*10**6:
            prime = True
            for p in primes:
                if x%p == 0:
                    prime = False
            if prime:
                primes.append(x)
                sum += x
            x+=1
        print(sum)
def p11():
    '''
    In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    :return:70600674
    cool idea i got admist my defecation: instead of iterating over all rows, columns, and diagonals, go over the board with a 4x4 mask, find all products in the mask.
    '''
    def max4by4(x,y, input):
        if 0<=x<len(input)-4 and 0<=y<len(input[0])-4:
            grid = []
            for i in range(4):
                grid.append(input[x+i][y:y+4])
            max = 0
            print(grid)
            for row in grid:
                prod = 1
                for e in row:
                    prod*=e
                if prod>max:
                    max=prod
            for i in range(4):
                prod = 1
                for j in range(4):
                    prod*= grid[j][i]
                if prod>max:
                    max = prod
            prod = 1
            for i in range(4):
                prod*= grid[i][i]
            if prod>max:
                max= prod
            prod = 1
            for i in range(4):
                prod*=grid[i][3-i]
            if prod>max:
                max = prod
            return max
        return 0
    max = 0
    str = '08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 \
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 \
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 \
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 \
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 \
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 \
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 \
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 \
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 \
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 \
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 \
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 \
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 \
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 \
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 \
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 \
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 \
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 \
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 \
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'
    f = str.split(' ')
    print(len(f))
    index= 0
    input = []
    for i in range(20):
        row = []
        for j in range(20):
            row.append(int(f[index]))
            index+=1
        input.append(row)
    for i in range(len(input)):
        for j in range(len(input[0])):
            c = max4by4(i, j, input)
            if c>max:
                max = c
    print(max)

p11()